#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è JSONL –¥–∞–º–ø–æ–≤ kaikki.org –≤ SQLite –ë–î –¥–ª—è Anki Wiktionary –∞–¥–¥–æ–Ω–∞.
–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∏–∑—É—á–µ–Ω–∏–∏ –∞–¥–¥–æ–Ω–∞ abdnh/anki-wiktionary v1.2.0+

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–º—É –∞–¥–¥–æ–Ω–æ–º.
"""

import sqlite3
import json
import sys
import os
from pathlib import Path
from typing import Dict, Any


def create_kaikki_database(db_path: str) -> sqlite3.Connection:
    """
    –°–æ–∑–¥–∞–µ—Ç SQLite –ë–î —Å–æ —Å—Ö–µ–º–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –∞–¥–¥–æ–Ω–æ–º Wiktionary.

    –°—Ö–µ–º–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –≤–µ—Ä—Å–∏–∏ 1.2.0+, –≥–¥–µ —Å–ª–æ–≤–∞—Ä–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–∞–∫ SQLite –ë–î
    –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –≤ –∏–º–µ–Ω–∞—Ö —Ñ–∞–π–ª–æ–≤.

    Args:
        db_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ë–î

    Returns:
        —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    """
    conn = sqlite3.connect(db_path)
    conn.execute("PRAGMA journal_mode=WAL")
    conn.execute("PRAGMA synchronous=NORMAL")

    cursor = conn.cursor()

    # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–ª–æ–≤–∞—Ä—è
    # word - —Å–∞–º–æ —Å–ª–æ–≤–æ
    # data - –ø–æ–ª–Ω—ã–π JSON –æ–±—ä–µ–∫—Ç –∑–∞–ø–∏—Å–∏
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS words (
            word TEXT NOT NULL,
            data TEXT NOT NULL,
            PRIMARY KEY (word, data)
        ) WITHOUT ROWID
    """)

    conn.commit()
    return conn


def import_kaikki_jsonl(jsonl_path: str, db_path: str, language: str) -> None:
    """
    –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç JSONL –¥–∞–º–ø –æ—Ç kaikki.org –≤ SQLite –ë–î.

    Args:
        jsonl_path: –ø—É—Ç—å –∫ JSONL —Ñ–∞–π–ª—É
        db_path: –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–π –ë–î
        language: –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞
    """
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ë–î –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(db_path):
        os.remove(db_path)
        print(f"‚úì –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –ë–î")

    # –°–æ–∑–¥–∞–µ–º –ë–î
    print(f"\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ë–î –¥–ª—è {language}...")
    conn = create_kaikki_database(db_path)
    cursor = conn.cursor()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total = 0
    skipped = 0
    batch_size = 5000
    batch = []

    print(f"üì• –ò–º–ø–æ—Ä—Ç –∏–∑ {jsonl_path}...\n")

    try:
        with open(jsonl_path, "r", encoding="utf-8") as f:
            for line_num, line in enumerate(f, 1):
                line = line.strip()
                if not line:
                    continue

                try:
                    entry = json.loads(line)

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è
                    word = entry.get("word", "").strip()

                    if not word:
                        skipped += 1
                        continue

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º entry –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É
                    entry_json = json.dumps(
                        entry, ensure_ascii=False, separators=(",", ":")
                    )

                    batch.append((word, entry_json))

                    # –í—Å—Ç–∞–≤–ª—è–µ–º –±–∞—Ç—á–∞–º–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    if len(batch) >= batch_size:
                        cursor.executemany(
                            "INSERT OR REPLACE INTO words (word, data) VALUES (?, ?)",
                            batch,
                        )
                        conn.commit()
                        total += len(batch)
                        print(f"   ‚öô –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {total:,} –∑–∞–ø–∏—Å–µ–π...")
                        batch = []

                except json.JSONDecodeError as e:
                    print(f"   ‚ö† JSON –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ {line_num}: {e}")
                    skipped += 1
                except Exception as e:
                    print(f"   ‚ö† –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ {line_num}: {e}")
                    skipped += 1

            # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
            if batch:
                cursor.executemany(
                    "INSERT OR REPLACE INTO words (word, data) VALUES (?, ?)",
                    batch,
                )
                conn.commit()
                total += len(batch)
                print(f"   ‚öô –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {total:,} –∑–∞–ø–∏—Å–µ–π...")

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        print("\nüîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ë–î...")
        conn.execute("VACUUM")
        conn.execute("ANALYZE")
        conn.commit()

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        db_size_mb = os.path.getsize(db_path) / (1024 * 1024)

        print(f"\n{'=' * 60}")
        print(f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"{'=' * 60}")
        print(f"   –Ø–∑—ã–∫:           {language}")
        print(f"   –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:  {total:,} –∑–∞–ø–∏—Å–µ–π")
        print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ:      {skipped:,}")
        print(f"   –†–∞–∑–º–µ—Ä –ë–î:      {db_size_mb:.2f} –ú–ë")
        print(f"   –ü—É—Ç—å –∫ –ë–î:      {db_path}")
        print(f"{'=' * 60}\n")

    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {jsonl_path}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
        sys.exit(1)
    finally:
        conn.close()


def main():
    if len(sys.argv) < 3:
        print("=" * 60)
        print("–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä Kaikki JSONL ‚Üí SQLite –¥–ª—è Anki Wiktionary")
        print("=" * 60)
        print("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python kaikki_to_sqlite.py <jsonl_file> <language> [output_dir]")
        print("\n–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python kaikki_to_sqlite.py kaikki.org-dictionary-Russian.json Russian")
        print("  python kaikki_to_sqlite.py english.json English ./dicts/")
        print("\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print("  jsonl_file  - –ø—É—Ç—å –∫ JSONL —Ñ–∞–π–ª—É –æ—Ç kaikki.org")
        print("  language    - –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ (English, Russian, German...)")
        print("  output_dir  - (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ë–î")
        print("=" * 60)
        sys.exit(1)

    jsonl_file = sys.argv[1]
    language = sys.argv[2]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if len(sys.argv) >= 4:
        output_dir = sys.argv[3]
    else:
        output_dir = "."

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(output_dir, exist_ok=True)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –ë–î
    db_file = os.path.join(output_dir, f"{language}.db")

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º
    import_kaikki_jsonl(jsonl_file, db_file, language)


if __name__ == "__main__":
    main()
